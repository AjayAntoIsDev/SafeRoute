# This workflow builds an Android debug APK from the 'frontend' directory
# when a new tag is pushed to the repository.

name: Build Android Debug APK

on:
  push:
    tags:
      - '*' # Triggers the workflow on version tags like v1.0, v2.0, etc.

jobs:
  build_android:
    runs-on: ubuntu-latest
    name: Build Android APK Job

    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up Node.js for building the web app part of Capacitor
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22' # Using Node.js version 22
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 3. Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontend # Run this command in the frontend folder

      # 4. Build the web application
      - name: Build web app
        run: npm run build
        working-directory: ./frontend # Run this command in the frontend folder

      # 5. Sync the web build with the native Android project
      - name: Sync Capacitor assets
        run: npx cap sync android
        working-directory: ./frontend # Run this command in the frontend folder

      # 6. Set up Java Development Kit (JDK) required for Android builds
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # Using Zulu OpenJDK
          java-version: '17'

      # 7. Cache Gradle dependencies to speed up future builds
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('frontend/**/*.gradle*', 'frontend/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 8. Build the debug APK using Gradle
      # The debug APK is unsigned and suitable for manual testing on a device.
      - name: Build debug APK
        run: ./gradlew assembleDebug
        working-directory: ./frontend/android # Run gradle from the android project folder

      # 9. Upload the generated APK as a build artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk # Name of the artifact
          path: frontend/android/app/build/outputs/apk/debug/app-debug.apk # Path to the generated APK
          retention-days: 7 # Store the artifact for 7 days
